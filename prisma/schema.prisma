generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  username       String         
  password       String?
  avatarUrl      String?
  bio            String?
  isVerified     Boolean        @default(false)
  refresh_token  String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now()) @updatedAt

  friendships    Friendship[]   @relation("UserFriends")
  friendOf       Friendship[]   @relation("UserFriendOf")
  posts          Post[]
  comments       Comment[]
  likes         Like[]
  sentNotifications     Notification[] @relation("SenderNotifications")
  receivedNotifications Notification[] @relation("RecipientNotifications")
  chatMemberships ChatMember[]
}


enum FriendshipStatus {
  pending
  accepted
  blocked
  rejected
}

model Friendship {
  id        Int              @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    FriendshipStatus // Example: 'pending', 'accepted', 'blocked'
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  user         User           @relation("UserFriends", fields: [userId], references: [id])
  friend       User           @relation("UserFriendOf", fields: [friendId], references: [id])
  Notification Notification[]

  @@unique([userId, friendId])
}

model Post {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  content     String?
  description String?
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [post_id], references: [id])
  post_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [post_id], references: [id])
  post_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum NotificationType {
  FRIEND_REQUEST_RECEIVED
  FRIEND_REQUEST_ACCEPTED
  POST_LIKED
  POST_COMMENTED
  LIVE_STREAMING
}

model Notification {
  id               Int              @id @default(autoincrement())
  senderId         Int
  recipientId      Int
  notificationType NotificationType
  message          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  friendshipId     Int?

  sender     User        @relation("SenderNotifications", fields: [senderId], references: [id])
  recipient  User        @relation("RecipientNotifications", fields: [recipientId], references: [id])
  friendship Friendship? @relation(fields: [friendshipId], references: [id])
}

model Chat {
  id           Int          @id @default(autoincrement())
  members      ChatMember[]
  last_message String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ChatMember {
  chatId Int
  userId Int

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
}
